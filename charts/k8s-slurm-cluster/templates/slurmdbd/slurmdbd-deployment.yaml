apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: slurm
    app.kubernetes.io/component: slurmdbd
  name: slurmdbd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: slurm
      app.kubernetes.io/component: slurmdbd
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: slurm
        app.kubernetes.io/component: slurmdbd
    spec:
      {{- with .Values.slurmdbd.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.slurmdbd.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.slurmdbd.nodeAffinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.slurmdbd.terminationGracePeriod }}
      {{- if .Values.slurmdbd.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.slurmdbd.imagePullSecrets | indent 8 }}
      {{- end }}
      initContainers:
      - name: init-slurm-db
        image: mysql
        command: ["/bin/sh", "-c"]
        env:
          - name: StoragePass
            valueFrom:
              secretKeyRef:
                name: database-auth-secret
                key: password
        args:
        - |
             echo $StoragePass | mysql -h mysql -u root -p -e "create user if not exists 'slurm'@'%' identified by '${StoragePass}'; grant all on slurm_acct_db.* TO 'slurm'@'%'; create database if not exists slurm_acct_db;"
      {{- if eq .Values.auth.krb5.enabled "true" }}
      - name: ad-join-init-container
        image: ubiquitycluster/slurm-adcli
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Reading SSSD credentials from secret..."
          domain=$(cat /etc/sssd-creds/domain)
          username=$(cat /etc/sssd-creds/username)
          password=$(cat /etc/sssd-creds/password)
          echo $password | adcli join --domain=$domain --login-user=$username --stdin-password && mv /etc/krb5.keytab /keytab/keytab
        volumeMounts:
        - name: keytab-volume
          mountPath: /keytab
        - name: sssd-creds
          mountPath: /etc/sssd-creds
      {{- end }}
      containers:
        - name: slurmdbd
          image: {{ .Values.slurmdbd.image }}
          imagePullPolicy: {{ .Values.slurmdbd.imagePullPolicy }}
          ports:
            - containerPort: 6819
          resources:
{{ toYaml .Values.slurmdbd.resources | indent 12 }}
          volumeMounts:
            - name: slurm-config-volume
              mountPath: /etc/slurm/slurm.conf
              subPath: slurm.conf
            - name:  {{ .Values.configmaps.sssdConfig }}
              mountPath: /etc/sssd/sssd.conf
              subPath: sssd.conf
            - name: slurm-jwt
              mountPath: /secrets/slurm
              readOnly: true
            - name: munge-key-secret
              mountPath: /tmp/munge.key
              subPath: munge.key
            - name: dbd-config-volume
              mountPath: /tmp/slurmdbd.conf
              subPath: slurmdbd.conf
            {{- if eq .Values.auth.krb5.enabled "true" }}
            - name: keytab-volume
              mountPath: /etc/krb5.keytab
              subPath: keytab
            {{- end }}
          env:
            - name: StoragePass
              valueFrom:
                secretKeyRef:
                  name: database-auth-secret
                  key: password
      hostname: slurmdbd
      restartPolicy: Always
      volumes:
        {{- if eq .Values.auth.krb5.enabled "true" }}
        - name: sssd-creds
          secret:
            secretName: sssd-creds
        {{- end }}
        - name: {{ .Values.configmaps.sssdConfig }}
          configMap:
            name: {{ .Values.configmaps.sssdConfig }}
            defaultMode: 0600
        - name: dbd-config-volume
          configMap:
            name: {{ .Values.configmaps.slurmdbdConf }}
        - name: slurm-config-volume
          configMap:
            name: {{ .Values.configmaps.slurmConf }}
        - name: keytab-volume
          emptydir: {}
        - name: slurm-jwt
          secret:
            secretName: "{{ .Values.jwt.secretName }}"
            defaultMode: 384
        - name: munge-key-secret
          secret:
            secretName: {{ .Values.secrets.mungeKey }}
            defaultMode: 0400
